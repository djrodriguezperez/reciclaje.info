@page "/contenedores/{IdContenedor:int}"

@using Reciclaje.Info.Client.Services
@using Reciclaje.Info.Client.Components
@using Reciclaje.Info.Shared.Types

@inject HttpClient client
@inject ISnackbar Snackbar


		<MudExpansionPanels Elevation="1" DisableBorders="true" Class="mt-3">
				<MudExpansionPanel>
					<TitleContent>						
						<div class="d-flex">
							<MudIconButton Icon="@Icono" Variant="Variant.Filled" Color="Color.Secondary " Size="Size.Small" class="mr-3"/>	
							
							<MudText Typo="Typo.h5" > @Titulo </MudText>
						</div>						
					</TitleContent>
					<ChildContent>
						<MudText Typo="Typo.subtitle2" GutterBottom="true"> @Descripcion </MudText>
					</ChildContent>
				</MudExpansionPanel>        
		 </MudExpansionPanels>

@if (!cargado)
{
	<MudOverlay Visible="esVisible" DarkBackground="true" Absolute="true" ZIndex="9999">
		<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
	</MudOverlay>
}
else
{
	<EcoMapComponent GeoDatos="@geoDatos"></EcoMapComponent>
}




@code {


	[Parameter] public int IdContenedor { get; set; } = 0;

	public string? Titulo { get; set; }
	public string? Descripcion { get; set; }
	public string? Icono { get; set; }

	private GeoAtomDto? geoDatos;
	private Boolean cargado;
	private Boolean esVisible;


	protected override async Task OnParametersSetAsync()
	{
		if (ShouldRender())
		{
			await LoadDataAsync();		
		}		
	}
	private async Task LoadDataAsync()
	{
		
			cargado = false;
			esVisible = true;
			ContenedorService service = new ContenedorService(client, IdContenedor);
			Titulo = service.Titulo;
			Descripcion = service.Descripcion;
			Icono = service.Icono; 
			geoDatos = await service.GetDataAsync<GeoAtomDto>();
			cargado = true;		
	}
}





