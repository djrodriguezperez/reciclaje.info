@page "/PuntosLimpios/{IdPuntoLimpio:int}"

@using Reciclaje.Info.Client.Services
@using Reciclaje.Info.Shared.Types

@inject HttpClient client
@inject ISnackbar Snackbar

<MudText Typo="Typo.h6" GutterBottom="true"> @Titulo </MudText>
<MudText Typo="Typo.body1" GutterBottom="true"> @Descripcion </MudText>

@if (!cargado)
{
	<MudOverlay Visible="esVisible" DarkBackground="true" Absolute="true" ZIndex="9999">
		<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
	</MudOverlay>
}
else
{
	@if (datos != null && datos.entries.Any())
	{
		<EcoMapComponet Markers="datos"></EcoMapComponet>
		Snackbar.Add($"Total de elementos encontrados:" + datos.entries.Count(), Severity.Success);
	}
	else
	{
		Snackbar.Add($"Opps! No hemos logrado recuperar información de Portal de Datos Abiertos.!", Severity.Error);
	}
}


@code {
	[Parameter] public int IdPuntoLimpio { get; set; } = 0;

	public string? Titulo { get; set; }
	public string? Descripcion { get; set; }

	private GeoAtomDto? datos;
	private Boolean cargado;
	private Boolean esVisible;


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		cargado = false;
		esVisible = true;


		ContenedorService service = new ContenedorService(client, IdPuntoLimpio);
		Titulo = service.Titulo;
		Descripcion = service.Descripcion;
		datos = await service.GetDataAsync<GeoAtomDto>();


		if (firstRender)
		{
			StateHasChanged();
		}

		cargado = true;
		
	}

}
