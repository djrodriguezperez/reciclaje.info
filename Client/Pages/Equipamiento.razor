@page "/"
@using Reciclaje.Info.Client.Services
@using Reciclaje.Info.Shared.Dto
@using Reciclaje.Info.Shared.Utils


@inject HttpClient client
@inject ISnackbar Snackbar
@inject IEquipamientoService servicio

<div class="d-flex">
	<MudIconButton Icon="@Icono" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" class="mr-3" />
	<MudText Typo="Typo.h5" GutterBottom="true"> @Titulo </MudText>
</div>


<MudTextField @bind-Value="@Filtro" Label="Describa aquí su residuo..." Variant="Variant.Text" Adornment="Adornment.End"
			  AdornmentIcon="@Icons.Filled.Search"
			  AdornmentColor="Color.Secondary"
			  TextChanged="FindDataAsync"
			  Class="mb-4" />

@if (datos == null)
{
	<MudText Typo="Typo.subtitle2" GutterBottom="true"> @SubTitulo </MudText>
}


@if (!cargado)
{
	<MudOverlay Visible="esVisible" DarkBackground="true" Absolute="true" ZIndex="9999">
		<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
	</MudOverlay>
}
else
{
	@if (datos != null && datos.Equipamientos!.Any())
	{
		<MudExpansionPanels Elevation="1" DisableBorders="true" Class="mt-6">
			@foreach (var item in datos.Equipamientos!)
			{
				<MudExpansionPanel IsInitiallyExpanded="true">
					<TitleContent>
						<div class="d-flex">
							<MudAvatar Style="font-size: 1rem;" Color="Color.Default" Variant="Variant.Outlined" Class="mr-3" Image=@item.Avatar> </MudAvatar>
							<MudText Typo="Typo.h6"> <strong> @item.Titulo</strong></MudText>



						</div>
					</TitleContent>
					<ChildContent>
						<MudText Typo="Typo.subtitle1"> <strong>Tipología de residuos que puedes incluir en este tipo de equipamiento.</strong></MudText>
						@foreach (var item in @item.Residuos.Split("#"))
							{
								<MudText Typo="Typo.body2">@item</MudText>								
							}
						
					</ChildContent>
				</MudExpansionPanel>
				
			}

		</MudExpansionPanels>
	}

}


@code {
	public string? Filtro { get; set; } = string.Empty;
	public string? Titulo { get; set; }
	public string? SubTitulo { get; set; }
	public string? Icono { get; set; }

	private EquipamientosDto? datos;
	private Boolean cargado;
	private Boolean esVisible;

	protected override Task OnInitializedAsync()
	{
		Titulo = servicio.Titulo;
		SubTitulo = servicio.SubTitulo;
		Icono = servicio.Icono;
		return base.OnInitializedAsync();
	}

	private async Task FindDataAsync()
	{
		try
		{
			Filtro = Filtro?.QuitarCaracteresEspeciales();
			if (!string.IsNullOrEmpty(Filtro) && !string.IsNullOrWhiteSpace(Filtro))
			{
				cargado = false;
				esVisible = true;
				datos = await servicio.GetDataAsync(Filtro!);


			@if (datos != null && datos.Equipamientos!.Any())
				{
					Snackbar.Add(string.Format("Total de equipamiento encontrado: {0}", datos.Equipamientos!.Count()), Severity.Success);
				}
				else
				{
					Snackbar.Add($"Opps! No hemos encontrado equipamiento en base su descripción. Pruebe con otro valor!", Severity.Info);
				}

				StateHasChanged();
				//StateHasChanged();
			}

		}
		catch (Exception ex)
		{
			Snackbar.Add(string.Format("Error: {0}", ex.Message), Severity.Error);
		}
		finally
		{			
			
			cargado = true;
		}
	}
}